syntax = "proto3";
package blockchain;

import "types/account.proto";
import "types/primitives.proto";

// BLOCK
// ================================================================================================

// Represents a block header.
message BlockHeader {
    // Specifies the version of the protocol.
    uint32 version = 1;

    // The commitment of the previous blocks header.
    primitives.Digest prev_block_commitment = 2;

    // A unique sequential number of the current block.
    fixed32 block_num = 3;

    // A commitment to an MMR of the entire chain where each block is a leaf.
    primitives.Digest chain_commitment = 4;

    // A commitment to account database.
    primitives.Digest account_root = 5;

    // A commitment to the nullifier database.
    primitives.Digest nullifier_root = 6;

    // A commitment to all notes created in the current block.
    primitives.Digest note_root = 7;

    // A commitment to a set of IDs of transactions which affected accounts in this block.
    primitives.Digest tx_commitment = 8;

    // A commitment to a STARK proof attesting to the correct state transition.
    primitives.Digest proof_commitment = 9;

    // A commitment to all transaction kernels supported by this block.
    primitives.Digest tx_kernel_commitment = 10;

    // The time when the block was created.
    fixed32 timestamp = 11;
}

// TRANSACTIONS
// ================================================================================================

// Represents a transaction ID.
message TransactionId {
    // The transaction ID.
    primitives.Digest id = 1;
}

// Represents a transaction summary.
message TransactionSummary {
    // A unique 32-byte identifier of a transaction.
    TransactionId transaction_id = 1;

    // The block number in which the transaction was executed.
    fixed32 block_num = 2;

    // The ID of the account affected by the transaction.
    account.AccountId account_id = 3;
}

enum TransactionStatus {
    COMMITTED = 0;
    REVERTED = 1;
}
