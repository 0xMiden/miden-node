// This file is @generated by prost-build.
/// Returns the latest state proofs of the specified accounts.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountProofs {
    /// A list of account requests, including map keys + values.
    #[prost(message, repeated, tag = "1")]
    pub account_requests: ::prost::alloc::vec::Vec<AccountRequest>,
    /// Optional flag to include account headers and account code in the response. If false, storage
    /// requests are also ignored. False by default.
    #[prost(bool, optional, tag = "2")]
    pub include_headers: ::core::option::Option<bool>,
    /// Account code commitments corresponding to the last-known `AccountCode` for requested
    /// accounts. Responses will include only the ones that are not known to the caller.
    /// These are not associated with a specific account but rather, they will be matched against
    /// all requested accounts.
    #[prost(message, repeated, tag = "3")]
    pub code_commitments: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Represents per-account requests where each account ID has its own list of
/// (storage_slot_index, map_keys) pairs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountRequest {
    /// The account ID for this request.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// List of storage requests for this account.
    #[prost(message, repeated, tag = "2")]
    pub storage_requests: ::prost::alloc::vec::Vec<StorageRequest>,
}
/// Represents a storage slot index and the associated map keys.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StorageRequest {
    /// Storage slot index (\[0..255\])
    #[prost(uint32, tag = "1")]
    pub storage_slot_index: u32,
    /// A list of map keys (Digests) associated with this storage slot.
    #[prost(message, repeated, tag = "2")]
    pub map_keys: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Returns delta of the account states in the range from `from_block_num` (exclusive) to
/// `to_block_num` (inclusive).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountStateDelta {
    /// ID of the account for which the delta is requested.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// Block number from which the delta is requested (exclusive).
    #[prost(fixed32, tag = "2")]
    pub from_block_num: u32,
    /// Block number up to which the delta is requested (inclusive).
    #[prost(fixed32, tag = "3")]
    pub to_block_num: u32,
}
/// Retrieves block data by given block number.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBlockByNumber {
    /// The block number of the target block.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
}
/// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNullifiersByPrefix {
    /// Number of bits used for nullifier prefix. Currently the only supported value is 16.
    #[prost(uint32, tag = "1")]
    pub prefix_len: u32,
    /// List of nullifiers to check. Each nullifier is specified by its prefix with length equal
    /// to `prefix_len`.
    #[prost(uint32, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<u32>,
    /// Block number from which the nullifiers are requested (inclusive).
    #[prost(fixed32, tag = "3")]
    pub block_num: u32,
}
/// Returns a nullifier proof for each of the requested nullifiers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNullifiers {
    /// List of nullifiers to return proofs for.
    #[prost(message, repeated, tag = "1")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Returns the block header corresponding to the requested block number, as well as the merkle
/// path and current forest which validate the block's inclusion in the chain.
///
/// The Merkle path is an MMR proof for the block's leaf, based on the current chain length.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBlockHeaderByNumber {
    /// The target block height, defaults to latest if not provided.
    #[prost(uint32, optional, tag = "1")]
    pub block_num: ::core::option::Option<u32>,
    /// Whether or not to return authentication data for the block header.
    #[prost(bool, optional, tag = "2")]
    pub include_mmr_proof: ::core::option::Option<bool>,
}
/// State synchronization request.
///
/// Specifies state updates the client is interested in. The server will return the first block which
/// contains a note matching `note_tags` or the chain tip. And the corresponding updates to
/// `account_ids` for that block range.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncState {
    /// Last block known by the client. The response will contain data starting from the next block,
    /// until the first block which contains a note of matching the requested tag, or the chain tip
    /// if there are no notes.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Accounts' commitment to include in the response.
    ///
    /// An account commitment will be included if-and-only-if it is the latest update. Meaning it is
    /// possible there was an update to the account for the given range, but if it is not the latest,
    /// it won't be included in the response.
    #[prost(message, repeated, tag = "2")]
    pub account_ids: ::prost::alloc::vec::Vec<super::account::AccountId>,
    /// Specifies the tags which the client is interested in.
    #[prost(fixed32, repeated, tag = "3")]
    pub note_tags: ::prost::alloc::vec::Vec<u32>,
}
/// Note synchronization request.
///
/// Specifies note tags that client is interested in. The server will return the first block which
/// contains a note matching `note_tags` or the chain tip.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncNote {
    /// Last block known by the client. The response will contain data starting from the next block,
    /// until the first block which contains a note of matching the requested tag.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Specifies the tags which the client is interested in.
    #[prost(fixed32, repeated, tag = "2")]
    pub note_tags: ::prost::alloc::vec::Vec<u32>,
}
/// Submits proven transaction to the Miden network.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitProvenTransaction {
    /// Transaction encoded using \[winter_utils::Serializable\] implementation for
    /// \[miden_objects::transaction::proven_tx::ProvenTransaction\].
    #[prost(bytes = "vec", tag = "1")]
    pub transaction: ::prost::alloc::vec::Vec<u8>,
}
/// Returns a list of notes matching the provided note IDs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotesById {
    /// List of notes to be queried from the database.
    #[prost(message, repeated, tag = "1")]
    pub note_ids: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Returns the latest state of an account with the specified ID.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccountDetails {
    /// Account ID to get details.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
}
/// Represents the result of checking nullifiers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nullifiers {
    /// Each requested nullifier has its corresponding nullifier proof at the same position.
    #[prost(message, repeated, tag = "1")]
    pub proofs: ::prost::alloc::vec::Vec<super::primitives::SmtOpening>,
}
/// Represents the result of checking nullifiers by prefix.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NullifiersByPrefix {
    /// List of nullifiers matching the prefixes specified in the request.
    #[prost(message, repeated, tag = "1")]
    pub nullifiers: ::prost::alloc::vec::Vec<NullifierUpdate>,
}
/// Represents the result of getting a block header by block number.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockHeaderByNumber {
    /// The requested block header.
    #[prost(message, optional, tag = "1")]
    pub block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Merkle path to verify the block's inclusion in the MMR at the returned `chain_length`.
    #[prost(message, optional, tag = "2")]
    pub mmr_path: ::core::option::Option<super::primitives::MerklePath>,
    /// Current chain length.
    #[prost(fixed32, optional, tag = "3")]
    pub chain_length: ::core::option::Option<u32>,
}
/// Represents a single nullifier update.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NullifierUpdate {
    /// Nullifier ID.
    #[prost(message, optional, tag = "1")]
    pub nullifier: ::core::option::Option<super::primitives::Digest>,
    /// Block number.
    #[prost(fixed32, tag = "2")]
    pub block_num: u32,
}
/// Represents the result of syncing state request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncStateResult {
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "1")]
    pub chain_tip: u32,
    /// Block header of the block with the first note matching the specified criteria.
    #[prost(message, optional, tag = "2")]
    pub block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Data needed to update the partial MMR from `request.block_num + 1` to `response.block_header.block_num`.
    #[prost(message, optional, tag = "3")]
    pub mmr_delta: ::core::option::Option<super::primitives::MmrDelta>,
    /// List of account commitments updated after `request.block_num + 1` but not after `response.block_header.block_num`.
    #[prost(message, repeated, tag = "5")]
    pub accounts: ::prost::alloc::vec::Vec<super::account::AccountSummary>,
    /// List of transactions executed against requested accounts between `request.block_num + 1` and
    /// `response.block_header.block_num`.
    #[prost(message, repeated, tag = "6")]
    pub transactions: ::prost::alloc::vec::Vec<super::blockchain::TransactionSummary>,
    /// List of all notes together with the Merkle paths from `response.block_header.note_root`.
    #[prost(message, repeated, tag = "7")]
    pub notes: ::prost::alloc::vec::Vec<super::account::NoteSyncRecord>,
}
/// Represents the result of syncing notes request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncedNotes {
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "1")]
    pub chain_tip: u32,
    /// Block header of the block with the first note matching the specified criteria.
    #[prost(message, optional, tag = "2")]
    pub block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Merkle path to verify the block's inclusion in the MMR at the returned `chain_tip`.
    ///
    /// An MMR proof can be constructed for the leaf of index `block_header.block_num` of
    /// an MMR of forest `chain_tip` with this path.
    #[prost(message, optional, tag = "3")]
    pub mmr_path: ::core::option::Option<super::primitives::MerklePath>,
    /// List of all notes together with the Merkle paths from `response.block_header.note_root`.
    #[prost(message, repeated, tag = "4")]
    pub notes: ::prost::alloc::vec::Vec<super::account::NoteSyncRecord>,
}
/// Represents the result of submitting proven transaction.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProvenTransaction {
    /// The node's current block height.
    #[prost(fixed32, tag = "1")]
    pub block_height: u32,
}
/// Represents the result of getting account proofs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountProofs {
    /// Block number at which the state of the accounts is returned.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// List of account state infos for the requested account keys.
    #[prost(message, repeated, tag = "2")]
    pub account_proofs: ::prost::alloc::vec::Vec<AccountProof>,
}
/// A single account proof returned as a response to `GetAccountProofs`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountProof {
    /// The account witness for the current state commitment of one account ID.
    #[prost(message, optional, tag = "1")]
    pub witness: ::core::option::Option<AccountWitness>,
    /// State header for public accounts. Filled only if `include_headers` flag is set to `true`.
    #[prost(message, optional, tag = "2")]
    pub state_header: ::core::option::Option<AccountStateHeader>,
}
/// State header for public accounts.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountStateHeader {
    /// Account header.
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<super::account::AccountHeader>,
    /// Values of all account storage slots (max 255).
    #[prost(bytes = "vec", tag = "2")]
    pub storage_header: ::prost::alloc::vec::Vec<u8>,
    /// Account code, returned only when none of the request's code commitments match
    /// the current one.
    #[prost(bytes = "vec", optional, tag = "3")]
    pub account_code: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Storage slots information for this account
    #[prost(message, repeated, tag = "4")]
    pub storage_maps: ::prost::alloc::vec::Vec<StorageSlotMapProof>,
}
/// Represents a single storage slot with the requested keys and their respective values.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StorageSlotMapProof {
    /// The storage slot index (\[0..255\]).
    #[prost(uint32, tag = "1")]
    pub storage_slot: u32,
    /// Merkle proof of the map value
    #[prost(bytes = "vec", tag = "2")]
    pub smt_proof: ::prost::alloc::vec::Vec<u8>,
}
/// Represents the result of getting account state delta.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountStateDelta {
    /// The calculated account delta encoded using \[winter_utils::Serializable\] implementation
    /// for \[miden_objects::account::delta::AccountDelta\].
    #[prost(bytes = "vec", optional, tag = "1")]
    pub delta: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Represents the result of getting block by number.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockByNumber {
    /// The requested block data encoded using \[winter_utils::Serializable\] implementation for
    /// \[miden_objects::block::Block\].
    #[prost(bytes = "vec", optional, tag = "1")]
    pub block: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Represents the result of getting notes by IDs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotesById {
    /// Lists Note's returned by the database.
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<super::account::CommittedNote>,
}
/// Represents the result of getting account details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountDetails {
    /// Account info (with details for public accounts).
    #[prost(message, optional, tag = "1")]
    pub details: ::core::option::Option<super::account::AccountInfo>,
}
/// An account witness returned as a response to the `GetBlockInputs`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountWitness {
    /// Account ID for which this proof is requested.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// The account ID within the proof, which may be different from the above account ID.
    /// This can happen when the requested account ID's prefix matches the prefix of an existing
    /// account ID in the tree. Then the witness will prove inclusion of this witness ID in the tree.
    #[prost(message, optional, tag = "2")]
    pub witness_id: ::core::option::Option<super::account::AccountId>,
    /// The state commitment whose inclusion the witness proves.
    #[prost(message, optional, tag = "3")]
    pub commitment: ::core::option::Option<super::primitives::Digest>,
    /// The merkle path of the state commitment in the account tree.
    #[prost(message, optional, tag = "4")]
    pub path: ::core::option::Option<super::primitives::MerklePath>,
}
/// Represents the status of the block producer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockProducerStatus {
    /// The block producer's running version.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    /// The block producer's status.
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
}
/// Represents the status of the store.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreStatus {
    /// The store's running version.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    /// The store's status.
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "3")]
    pub chain_tip: u32,
}
