// This file is @generated by prost-build.
/// Applies changes of a new block to the DB and in-memory data structures.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplyBlock {
    /// Block data encoded using \[winter_utils::Serializable\] implementation for
    /// \[miden_objects::block::Block\].
    #[prost(bytes = "vec", tag = "1")]
    pub block: ::prost::alloc::vec::Vec<u8>,
}
/// Returns a list of unconsumed network notes using pagination.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUnconsumedNetworkNotes {
    /// An opaque token used to paginate through the notes.
    ///
    /// This should be null on the first call, and set to the response
    /// token until the response token is null, at which point all data
    /// has been fetched.
    #[prost(uint64, optional, tag = "1")]
    pub page_token: ::core::option::Option<u64>,
    /// Number of notes to retrieve per page.
    #[prost(uint64, tag = "2")]
    pub page_size: u64,
}
/// Returns the latest state of a network account based on the account ID prefix.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNetworkAccountDetailsByPrefix {
    /// Account ID prefix.
    #[prost(fixed32, tag = "1")]
    pub account_id_prefix: u32,
}
/// Returns data required to prove the next block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBlockInputs {
    /// IDs of all accounts updated in the proposed block for which to retrieve account witnesses.
    #[prost(message, repeated, tag = "1")]
    pub account_ids: ::prost::alloc::vec::Vec<super::account::AccountId>,
    /// Nullifiers of all notes consumed by the block for which to retrieve witnesses.
    ///
    /// Due to note erasure it will generally not be possible to know the exact set of nullifiers
    /// a block will create, unless we pre-execute note erasure. So in practice, this set of
    /// nullifiers will be the set of nullifiers of all proven batches in the block, which is a
    /// superset of the nullifiers the block may create.
    ///
    /// However, if it is known that a certain note will be erased, it would not be necessary to
    /// provide a nullifier witness for it.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Array of note IDs for which to retrieve note inclusion proofs, **if they exist in the store**.
    #[prost(message, repeated, tag = "3")]
    pub unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Array of block numbers referenced by all batches in the block.
    #[prost(fixed32, repeated, tag = "4")]
    pub reference_blocks: ::prost::alloc::vec::Vec<u32>,
}
/// Returns the inputs for a transaction batch.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBatchInputs {
    /// List of unauthenticated notes to be queried from the database.
    #[prost(message, repeated, tag = "1")]
    pub note_ids: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Set of block numbers referenced by transactions.
    #[prost(fixed32, repeated, tag = "2")]
    pub reference_blocks: ::prost::alloc::vec::Vec<u32>,
}
/// Returns data required to validate a new transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionInputs {
    /// ID of the account against which a transaction is executed.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// Set of nullifiers consumed by this transaction.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Set of unauthenticated notes to check for existence on-chain.
    ///
    /// These are notes which were not on-chain at the state the transaction was proven,
    /// but could by now be present.
    #[prost(message, repeated, tag = "3")]
    pub unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Returns peaks for the given block number, or the chain tip if a block number not provided.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentBlockchainData {
    /// Last client-known block number. If not specified, the latest header and peaks will be retrieved.
    #[prost(fixed32, optional, tag = "1")]
    pub block_num: ::core::option::Option<u32>,
}
/// Represents the result of getting block inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInputs {
    /// The latest block header.
    #[prost(message, optional, tag = "1")]
    pub latest_block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Proof of each requested unauthenticated note's inclusion in a block, **if it existed in
    /// the store**.
    #[prost(message, repeated, tag = "2")]
    pub unauthenticated_note_proofs: ::prost::alloc::vec::Vec<
        super::account::NoteInclusionInBlockProof,
    >,
    /// The serialized chain MMR which includes proofs for all blocks referenced by the
    /// above note inclusion proofs as well as proofs for inclusion of the requested blocks
    /// referenced by the batches in the block.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_block_chain: ::prost::alloc::vec::Vec<u8>,
    /// The state commitments of the requested accounts and their authentication paths.
    #[prost(message, repeated, tag = "4")]
    pub account_witnesses: ::prost::alloc::vec::Vec<super::shared::AccountWitness>,
    /// The requested nullifiers and their authentication paths.
    #[prost(message, repeated, tag = "5")]
    pub nullifier_witnesses: ::prost::alloc::vec::Vec<NullifierWitness>,
}
/// Represents the result of getting transaction inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionInputs {
    /// Account state proof.
    #[prost(message, optional, tag = "1")]
    pub account_state: ::core::option::Option<AccountTransactionInputRecord>,
    /// List of nullifiers that have been consumed.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<NullifierTransactionInputRecord>,
    /// List of unauthenticated notes that were not found in the database.
    #[prost(message, repeated, tag = "3")]
    pub found_unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// The node's current block height.
    #[prost(fixed32, tag = "4")]
    pub block_height: u32,
}
/// Represents the result of getting the unconsumed network notes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnconsumedNetworkNotesResult {
    /// An opaque pagination token.
    ///
    /// Use this in your next request to get the next
    /// set of data.
    ///
    /// Will be null once there is no more data remaining.
    #[prost(uint64, optional, tag = "1")]
    pub next_token: ::core::option::Option<u64>,
    /// The list of unconsumed network notes.
    #[prost(message, repeated, tag = "2")]
    pub notes: ::prost::alloc::vec::Vec<super::account::NetworkNote>,
}
/// Current blockchain data based on the requested block number.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurrentBlockchainDataResult {
    /// Commitments that represent the current state according to the MMR.
    #[prost(message, repeated, tag = "1")]
    pub current_peaks: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Current block header.
    #[prost(message, optional, tag = "2")]
    pub current_block_header: ::core::option::Option<super::blockchain::BlockHeader>,
}
/// Represents the result of getting network account details by prefix.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNetworkAccountDetailsByPrefixResult {
    /// Account info.
    #[prost(message, optional, tag = "1")]
    pub details: ::core::option::Option<super::account::AccountInfo>,
}
/// A nullifier returned as a response to the `GetTransactionInputs`.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NullifierTransactionInputRecord {
    /// The nullifier ID.
    #[prost(message, optional, tag = "1")]
    pub nullifier: ::core::option::Option<super::primitives::Digest>,
    /// The block at which the nullifier has been consumed, zero if not consumed.
    #[prost(fixed32, tag = "2")]
    pub block_num: u32,
}
/// An account returned as a response to the `GetTransactionInputs`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountTransactionInputRecord {
    /// The account ID.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// The latest account commitment, zero commitment if the account doesn't exist.
    #[prost(message, optional, tag = "2")]
    pub account_commitment: ::core::option::Option<super::primitives::Digest>,
}
/// A nullifier returned as a response to the `GetBlockInputs`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NullifierWitness {
    /// The nullifier.
    #[prost(message, optional, tag = "1")]
    pub nullifier: ::core::option::Option<super::primitives::Digest>,
    /// The SMT proof to verify the nullifier's inclusion in the nullifier tree.
    #[prost(message, optional, tag = "2")]
    pub opening: ::core::option::Option<super::primitives::SmtOpening>,
}
/// Represents the result of getting batch inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchInputs {
    /// The block header that the transaction batch should reference.
    #[prost(message, optional, tag = "1")]
    pub batch_reference_block_header: ::core::option::Option<
        super::blockchain::BlockHeader,
    >,
    /// Proof of each _found_ unauthenticated note's inclusion in a block.
    #[prost(message, repeated, tag = "2")]
    pub note_proofs: ::prost::alloc::vec::Vec<super::account::NoteInclusionInBlockProof>,
    /// The serialized chain MMR which includes proofs for all blocks referenced by the
    /// above note inclusion proofs as well as proofs for inclusion of the blocks referenced
    /// by the transactions in the batch.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_block_chain: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
pub mod rpc_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store API for the RPC component
    #[derive(Debug, Clone)]
    pub struct RpcClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RpcClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RpcClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RpcClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RpcClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns a nullifier proof for each of the requested nullifiers.
        pub async fn check_nullifiers(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::CheckNullifiers>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::Nullifiers>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/CheckNullifiers",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Rpc", "CheckNullifiers"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
        ///
        /// Note that only 16-bit prefixes are supported at this time.
        pub async fn check_nullifiers_by_prefix(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::CheckNullifiersByPrefix,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::NullifiersByPrefix>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/CheckNullifiersByPrefix",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "CheckNullifiersByPrefix"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state of an account with the specified ID.
        pub async fn get_account_details(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::GetAccountDetails>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountDetails>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/GetAccountDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "GetAccountDetails"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state proofs of the specified accounts.
        pub async fn get_account_proofs(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::GetAccountProofs>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountProofs>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/GetAccountProofs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "GetAccountProofs"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns delta of the account states in the range from `from_block_num` (exclusive) to
        /// `to_block_num` (inclusive).
        pub async fn get_account_state_delta(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::GetAccountStateDelta>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountStateDelta>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/GetAccountStateDelta",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "GetAccountStateDelta"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns raw block data for the specified block number.
        pub async fn get_block_by_number(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::GetBlockByNumber>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockByNumber>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/GetBlockByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "GetBlockByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::GetBlockHeaderByNumber,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Rpc/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Rpc", "GetBlockHeaderByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of notes matching the provided note IDs.
        pub async fn get_notes_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::GetNotesById>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::GetNotesByIdResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Rpc/GetNotesById");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Rpc", "GetNotesById"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the tip of chain for the notes they are interested in.
        ///
        /// Client specifies the `note_tags` they are interested in, and the block height from which to search for new for
        /// matching notes for. The request will then return the next block containing any note matching the provided tags.
        ///
        /// The response includes each note's metadata and inclusion proof.
        ///
        /// A basic note sync can be implemented by repeatedly requesting the previous response's block until reaching the
        /// tip of the chain.
        pub async fn sync_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::SyncNote>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::SyncNoteResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Rpc/SyncNotes");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Rpc", "SyncNotes"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the latest state of the chain
        /// for the objects (accounts, notes, nullifiers) the client is interested in.
        ///
        /// This request returns the next block containing requested data. It also returns `chain_tip`
        /// which is the latest block number in the chain. Client is expected to repeat these requests
        /// in a loop until `response.block_header.block_num == response.chain_tip`, at which point
        /// the client is fully synchronized with the chain.
        ///
        /// Each request also returns info about new notes, nullifiers etc. created. It also returns
        /// Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
        /// MMR peaks and chain MMR nodes.
        ///
        /// For preserving some degree of privacy, note tags and nullifiers filters contain only high
        /// part of hashes. Thus, returned data contains excessive notes and nullifiers, client can make
        /// additional filtering of that data on its side.
        pub async fn sync_state(
            &mut self,
            request: impl tonic::IntoRequest<super::super::shared::SyncState>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::SyncStateResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Rpc/SyncState");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Rpc", "SyncState"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the status info.
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::StoreStatus>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Rpc/Status");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Rpc", "Status"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod block_producer_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store API for the BlockProducer component
    #[derive(Debug, Clone)]
    pub struct BlockProducerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BlockProducerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BlockProducerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BlockProducerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BlockProducerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Applies changes of a new block to the DB and in-memory data structures.
        pub async fn apply_block(
            &mut self,
            request: impl tonic::IntoRequest<super::ApplyBlock>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.BlockProducer/ApplyBlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.BlockProducer", "ApplyBlock"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::GetBlockHeaderByNumber,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.BlockProducer/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("store.BlockProducer", "GetBlockHeaderByNumber"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns data required to prove the next block.
        pub async fn get_block_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBlockInputs>,
        ) -> std::result::Result<tonic::Response<super::BlockInputs>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.BlockProducer/GetBlockInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.BlockProducer", "GetBlockInputs"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the inputs for a transaction batch.
        pub async fn get_batch_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBatchInputs>,
        ) -> std::result::Result<tonic::Response<super::BatchInputs>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.BlockProducer/GetBatchInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.BlockProducer", "GetBatchInputs"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns data required to validate a new transaction.
        pub async fn get_transaction_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTransactionInputs>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionInputs>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.BlockProducer/GetTransactionInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.BlockProducer", "GetTransactionInputs"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod ntx_builder_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store API for the network transaction builder component
    #[derive(Debug, Clone)]
    pub struct NtxBuilderClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NtxBuilderClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NtxBuilderClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NtxBuilderClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NtxBuilderClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::GetBlockHeaderByNumber,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.NtxBuilder/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.NtxBuilder", "GetBlockHeaderByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the list of unconsumed network notes and the next page number to query.
        pub async fn get_unconsumed_network_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUnconsumedNetworkNotes>,
        ) -> std::result::Result<
            tonic::Response<super::GetUnconsumedNetworkNotesResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.NtxBuilder/GetUnconsumedNetworkNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("store.NtxBuilder", "GetUnconsumedNetworkNotes"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the block header at the chain tip, as well as the MMR peaks corresponding to this
        /// header for executing network transactions.
        pub async fn get_current_blockchain_data(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCurrentBlockchainData>,
        ) -> std::result::Result<
            tonic::Response<super::GetCurrentBlockchainDataResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.NtxBuilder/GetCurrentBlockchainData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.NtxBuilder", "GetCurrentBlockchainData"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state of a network account with the specified account prefix.
        pub async fn get_network_account_details_by_prefix(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNetworkAccountDetailsByPrefix>,
        ) -> std::result::Result<
            tonic::Response<super::GetNetworkAccountDetailsByPrefixResult>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.NtxBuilder/GetNetworkAccountDetailsByPrefix",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "store.NtxBuilder",
                        "GetNetworkAccountDetailsByPrefix",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod rpc_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RpcServer.
    #[async_trait]
    pub trait Rpc: std::marker::Send + std::marker::Sync + 'static {
        /// Returns a nullifier proof for each of the requested nullifiers.
        async fn check_nullifiers(
            &self,
            request: tonic::Request<super::super::shared::CheckNullifiers>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::Nullifiers>,
            tonic::Status,
        >;
        /// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
        ///
        /// Note that only 16-bit prefixes are supported at this time.
        async fn check_nullifiers_by_prefix(
            &self,
            request: tonic::Request<super::super::shared::CheckNullifiersByPrefix>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::NullifiersByPrefix>,
            tonic::Status,
        >;
        /// Returns the latest state of an account with the specified ID.
        async fn get_account_details(
            &self,
            request: tonic::Request<super::super::shared::GetAccountDetails>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountDetails>,
            tonic::Status,
        >;
        /// Returns the latest state proofs of the specified accounts.
        async fn get_account_proofs(
            &self,
            request: tonic::Request<super::super::shared::GetAccountProofs>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountProofs>,
            tonic::Status,
        >;
        /// Returns delta of the account states in the range from `from_block_num` (exclusive) to
        /// `to_block_num` (inclusive).
        async fn get_account_state_delta(
            &self,
            request: tonic::Request<super::super::shared::GetAccountStateDelta>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::AccountStateDelta>,
            tonic::Status,
        >;
        /// Returns raw block data for the specified block number.
        async fn get_block_by_number(
            &self,
            request: tonic::Request<super::super::shared::GetBlockByNumber>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockByNumber>,
            tonic::Status,
        >;
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        async fn get_block_header_by_number(
            &self,
            request: tonic::Request<super::super::shared::GetBlockHeaderByNumber>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        >;
        /// Returns a list of notes matching the provided note IDs.
        async fn get_notes_by_id(
            &self,
            request: tonic::Request<super::super::shared::GetNotesById>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::GetNotesByIdResult>,
            tonic::Status,
        >;
        /// Returns info which can be used by the client to sync up to the tip of chain for the notes they are interested in.
        ///
        /// Client specifies the `note_tags` they are interested in, and the block height from which to search for new for
        /// matching notes for. The request will then return the next block containing any note matching the provided tags.
        ///
        /// The response includes each note's metadata and inclusion proof.
        ///
        /// A basic note sync can be implemented by repeatedly requesting the previous response's block until reaching the
        /// tip of the chain.
        async fn sync_notes(
            &self,
            request: tonic::Request<super::super::shared::SyncNote>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::SyncNoteResult>,
            tonic::Status,
        >;
        /// Returns info which can be used by the client to sync up to the latest state of the chain
        /// for the objects (accounts, notes, nullifiers) the client is interested in.
        ///
        /// This request returns the next block containing requested data. It also returns `chain_tip`
        /// which is the latest block number in the chain. Client is expected to repeat these requests
        /// in a loop until `response.block_header.block_num == response.chain_tip`, at which point
        /// the client is fully synchronized with the chain.
        ///
        /// Each request also returns info about new notes, nullifiers etc. created. It also returns
        /// Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
        /// MMR peaks and chain MMR nodes.
        ///
        /// For preserving some degree of privacy, note tags and nullifiers filters contain only high
        /// part of hashes. Thus, returned data contains excessive notes and nullifiers, client can make
        /// additional filtering of that data on its side.
        async fn sync_state(
            &self,
            request: tonic::Request<super::super::shared::SyncState>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::SyncStateResult>,
            tonic::Status,
        >;
        /// Returns the status info.
        async fn status(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::StoreStatus>,
            tonic::Status,
        >;
    }
    /// Store API for the RPC component
    #[derive(Debug)]
    pub struct RpcServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RpcServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RpcServer<T>
    where
        T: Rpc,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/store.Rpc/CheckNullifiers" => {
                    #[allow(non_camel_case_types)]
                    struct CheckNullifiersSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::CheckNullifiers>
                    for CheckNullifiersSvc<T> {
                        type Response = super::super::shared::Nullifiers;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::CheckNullifiers,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::check_nullifiers(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CheckNullifiersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/CheckNullifiersByPrefix" => {
                    #[allow(non_camel_case_types)]
                    struct CheckNullifiersByPrefixSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<
                        super::super::shared::CheckNullifiersByPrefix,
                    > for CheckNullifiersByPrefixSvc<T> {
                        type Response = super::super::shared::NullifiersByPrefix;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::CheckNullifiersByPrefix,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::check_nullifiers_by_prefix(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CheckNullifiersByPrefixSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetAccountDetails" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccountDetailsSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<
                        super::super::shared::GetAccountDetails,
                    > for GetAccountDetailsSvc<T> {
                        type Response = super::super::shared::AccountDetails;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetAccountDetails,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_account_details(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAccountDetailsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetAccountProofs" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccountProofsSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::GetAccountProofs>
                    for GetAccountProofsSvc<T> {
                        type Response = super::super::shared::AccountProofs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetAccountProofs,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_account_proofs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAccountProofsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetAccountStateDelta" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccountStateDeltaSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<
                        super::super::shared::GetAccountStateDelta,
                    > for GetAccountStateDeltaSvc<T> {
                        type Response = super::super::shared::AccountStateDelta;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetAccountStateDelta,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_account_state_delta(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAccountStateDeltaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetBlockByNumber" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockByNumberSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::GetBlockByNumber>
                    for GetBlockByNumberSvc<T> {
                        type Response = super::super::shared::BlockByNumber;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetBlockByNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_block_by_number(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockByNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetBlockHeaderByNumber" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockHeaderByNumberSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<
                        super::super::shared::GetBlockHeaderByNumber,
                    > for GetBlockHeaderByNumberSvc<T> {
                        type Response = super::super::shared::BlockHeaderByNumber;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetBlockHeaderByNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_block_header_by_number(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockHeaderByNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/GetNotesById" => {
                    #[allow(non_camel_case_types)]
                    struct GetNotesByIdSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::GetNotesById>
                    for GetNotesByIdSvc<T> {
                        type Response = super::super::shared::GetNotesByIdResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::shared::GetNotesById>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::get_notes_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNotesByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/SyncNotes" => {
                    #[allow(non_camel_case_types)]
                    struct SyncNotesSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::SyncNote>
                    for SyncNotesSvc<T> {
                        type Response = super::super::shared::SyncNoteResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::shared::SyncNote>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::sync_notes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SyncNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/SyncState" => {
                    #[allow(non_camel_case_types)]
                    struct SyncStateSvc<T: Rpc>(pub Arc<T>);
                    impl<
                        T: Rpc,
                    > tonic::server::UnaryService<super::super::shared::SyncState>
                    for SyncStateSvc<T> {
                        type Response = super::super::shared::SyncStateResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::shared::SyncState>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::sync_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SyncStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Rpc/Status" => {
                    #[allow(non_camel_case_types)]
                    struct StatusSvc<T: Rpc>(pub Arc<T>);
                    impl<T: Rpc> tonic::server::UnaryService<()> for StatusSvc<T> {
                        type Response = super::super::shared::StoreStatus;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Rpc>::status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RpcServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "store.Rpc";
    impl<T> tonic::server::NamedService for RpcServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod block_producer_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BlockProducerServer.
    #[async_trait]
    pub trait BlockProducer: std::marker::Send + std::marker::Sync + 'static {
        /// Applies changes of a new block to the DB and in-memory data structures.
        async fn apply_block(
            &self,
            request: tonic::Request<super::ApplyBlock>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        async fn get_block_header_by_number(
            &self,
            request: tonic::Request<super::super::shared::GetBlockHeaderByNumber>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        >;
        /// Returns data required to prove the next block.
        async fn get_block_inputs(
            &self,
            request: tonic::Request<super::GetBlockInputs>,
        ) -> std::result::Result<tonic::Response<super::BlockInputs>, tonic::Status>;
        /// Returns the inputs for a transaction batch.
        async fn get_batch_inputs(
            &self,
            request: tonic::Request<super::GetBatchInputs>,
        ) -> std::result::Result<tonic::Response<super::BatchInputs>, tonic::Status>;
        /// Returns data required to validate a new transaction.
        async fn get_transaction_inputs(
            &self,
            request: tonic::Request<super::GetTransactionInputs>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionInputs>,
            tonic::Status,
        >;
    }
    /// Store API for the BlockProducer component
    #[derive(Debug)]
    pub struct BlockProducerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> BlockProducerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BlockProducerServer<T>
    where
        T: BlockProducer,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/store.BlockProducer/ApplyBlock" => {
                    #[allow(non_camel_case_types)]
                    struct ApplyBlockSvc<T: BlockProducer>(pub Arc<T>);
                    impl<T: BlockProducer> tonic::server::UnaryService<super::ApplyBlock>
                    for ApplyBlockSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ApplyBlock>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::apply_block(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ApplyBlockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.BlockProducer/GetBlockHeaderByNumber" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockHeaderByNumberSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<
                        super::super::shared::GetBlockHeaderByNumber,
                    > for GetBlockHeaderByNumberSvc<T> {
                        type Response = super::super::shared::BlockHeaderByNumber;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetBlockHeaderByNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_block_header_by_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockHeaderByNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.BlockProducer/GetBlockInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::GetBlockInputs>
                    for GetBlockInputsSvc<T> {
                        type Response = super::BlockInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBlockInputs>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_block_inputs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.BlockProducer/GetBatchInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetBatchInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::GetBatchInputs>
                    for GetBatchInputsSvc<T> {
                        type Response = super::BatchInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBatchInputs>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_batch_inputs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBatchInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.BlockProducer/GetTransactionInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::GetTransactionInputs>
                    for GetTransactionInputsSvc<T> {
                        type Response = super::TransactionInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTransactionInputs>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_transaction_inputs(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTransactionInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for BlockProducerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "store.BlockProducer";
    impl<T> tonic::server::NamedService for BlockProducerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod ntx_builder_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NtxBuilderServer.
    #[async_trait]
    pub trait NtxBuilder: std::marker::Send + std::marker::Sync + 'static {
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        async fn get_block_header_by_number(
            &self,
            request: tonic::Request<super::super::shared::GetBlockHeaderByNumber>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumber>,
            tonic::Status,
        >;
        /// Returns the list of unconsumed network notes and the next page number to query.
        async fn get_unconsumed_network_notes(
            &self,
            request: tonic::Request<super::GetUnconsumedNetworkNotes>,
        ) -> std::result::Result<
            tonic::Response<super::GetUnconsumedNetworkNotesResult>,
            tonic::Status,
        >;
        /// Returns the block header at the chain tip, as well as the MMR peaks corresponding to this
        /// header for executing network transactions.
        async fn get_current_blockchain_data(
            &self,
            request: tonic::Request<super::GetCurrentBlockchainData>,
        ) -> std::result::Result<
            tonic::Response<super::GetCurrentBlockchainDataResult>,
            tonic::Status,
        >;
        /// Returns the latest state of a network account with the specified account prefix.
        async fn get_network_account_details_by_prefix(
            &self,
            request: tonic::Request<super::GetNetworkAccountDetailsByPrefix>,
        ) -> std::result::Result<
            tonic::Response<super::GetNetworkAccountDetailsByPrefixResult>,
            tonic::Status,
        >;
    }
    /// Store API for the network transaction builder component
    #[derive(Debug)]
    pub struct NtxBuilderServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> NtxBuilderServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NtxBuilderServer<T>
    where
        T: NtxBuilder,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/store.NtxBuilder/GetBlockHeaderByNumber" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockHeaderByNumberSvc<T: NtxBuilder>(pub Arc<T>);
                    impl<
                        T: NtxBuilder,
                    > tonic::server::UnaryService<
                        super::super::shared::GetBlockHeaderByNumber,
                    > for GetBlockHeaderByNumberSvc<T> {
                        type Response = super::super::shared::BlockHeaderByNumber;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::GetBlockHeaderByNumber,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NtxBuilder>::get_block_header_by_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockHeaderByNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.NtxBuilder/GetUnconsumedNetworkNotes" => {
                    #[allow(non_camel_case_types)]
                    struct GetUnconsumedNetworkNotesSvc<T: NtxBuilder>(pub Arc<T>);
                    impl<
                        T: NtxBuilder,
                    > tonic::server::UnaryService<super::GetUnconsumedNetworkNotes>
                    for GetUnconsumedNetworkNotesSvc<T> {
                        type Response = super::GetUnconsumedNetworkNotesResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUnconsumedNetworkNotes>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NtxBuilder>::get_unconsumed_network_notes(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUnconsumedNetworkNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.NtxBuilder/GetCurrentBlockchainData" => {
                    #[allow(non_camel_case_types)]
                    struct GetCurrentBlockchainDataSvc<T: NtxBuilder>(pub Arc<T>);
                    impl<
                        T: NtxBuilder,
                    > tonic::server::UnaryService<super::GetCurrentBlockchainData>
                    for GetCurrentBlockchainDataSvc<T> {
                        type Response = super::GetCurrentBlockchainDataResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCurrentBlockchainData>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NtxBuilder>::get_current_blockchain_data(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetCurrentBlockchainDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.NtxBuilder/GetNetworkAccountDetailsByPrefix" => {
                    #[allow(non_camel_case_types)]
                    struct GetNetworkAccountDetailsByPrefixSvc<T: NtxBuilder>(
                        pub Arc<T>,
                    );
                    impl<
                        T: NtxBuilder,
                    > tonic::server::UnaryService<
                        super::GetNetworkAccountDetailsByPrefix,
                    > for GetNetworkAccountDetailsByPrefixSvc<T> {
                        type Response = super::GetNetworkAccountDetailsByPrefixResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetNetworkAccountDetailsByPrefix,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NtxBuilder>::get_network_account_details_by_prefix(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNetworkAccountDetailsByPrefixSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for NtxBuilderServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "store.NtxBuilder";
    impl<T> tonic::server::NamedService for NtxBuilderServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
