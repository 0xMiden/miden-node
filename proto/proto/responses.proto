syntax = "proto3";
package responses;

import "account_id.proto";
import "block_header.proto";
import "digest.proto";
import "merkle.proto";
import "mmr.proto";
import "tsmt.proto";

message CheckNullifiersResponse {
    // Each requested nullifier has its corresponding nullifier proof at the
    // same position.
    repeated tsmt.NullifierProof proofs = 1;
}

message GetBlockHeaderByNumberResponse {
    block_header.BlockHeader block_header = 1;
}

message AccountHashUpdate {
    account_id.AccountId account_id = 1;
    digest.Digest account_hash = 2;
    uint32 block_num = 3;
}

message NullifierUpdate {
    digest.Digest nullifier = 1;
    uint32 block_num = 2;
}

message NoteSyncRecord {
    uint32 note_index = 2;
    digest.Digest note_hash = 3;
    uint64 sender  = 4;
    uint64 tag = 5;
    uint32 num_assets = 6;
    merkle.MerklePath merkle_path = 7;
}

message SyncStateResponse {
    // number of the latest block in the chain
    uint32 chain_tip = 1;

    // block header of the block with the first note matching the specified criteria
    block_header.BlockHeader block_header = 2;

    // data needed to update the partial MMR from `block_ref` to `block_header.block_num`
    mmr.MmrDelta mmr_delta = 3;

    // Merkle path in the updated chain MMR to the block at `block_header.block_num`
    merkle.MerklePath block_path = 4;

    // a list of account hashes updated after `block_ref` but not after `block_header.block_num`
    repeated AccountHashUpdate accounts = 5;

    // a list of all notes together with the Merkle paths from `block_header.note_root`
    repeated NoteSyncRecord notes = 6;

    // a list of nullifiers created between `block_ref` and `block_header.block_num`
    repeated NullifierUpdate nullifiers = 7;
}

// An account returned as a response to the GetBlockInputs
message AccountBlockInputRecord {
    account_id.AccountId account_id = 1;
    digest.Digest account_hash = 2;
    merkle.MerklePath proof = 3;
}

// A nullifier returned as a response to the GetBlockInputs
message NullifierBlockInputRecord {
    digest.Digest nullifier = 1;
    merkle.MerklePath proof = 3;
}

message GetBlockInputsResponse {
    // The latest block header
    block_header.BlockHeader block_header = 1;

    // Peaks of the above block's mmr, The `forest` value is equal to the block number.
    repeated digest.Digest mmr_peaks = 2;

    // The hashes of the requested accouts and their authentication paths
    repeated AccountBlockInputRecord account_states = 3;

    // The requested nullifiers and their authentication paths
    repeated NullifierBlockInputRecord nullifiers = 4;
}

// An account returned as a response to the GetTransactionInputs
message AccountTransactionInputRecord {
    account_id.AccountId account_id = 1;
    // The latest account hash, zero hash if the account doesn't exist.
    digest.Digest account_hash = 2;
}

// A nullifier returned as a response to the GetTransactionInputs
message NullifierTransactionInputRecord {
    digest.Digest nullifier = 1;
    // The block at which the nullifier has been consumed, zero if not consumed.
    uint32 block_num = 3;
}

message GetTransactionInputsResponse {
    repeated AccountTransactionInputRecord account_states = 3;
    repeated NullifierTransactionInputRecord nullifiers = 4;
}
