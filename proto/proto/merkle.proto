syntax = "proto3";
package merkle;

import "digest.proto";

// Represents a Merkle path.
message MerklePath {
    // List of sibling node hashes, in order from the root to the leaf.
    repeated digest.Digest siblings = 1;
}

// A different representation of a Merkle path designed for memory efficiency.
message SparseMerklePath {
    // A bitmask representing empty nodes.
    //
    // The set bit corresponds to the depth of an empty node. The least significant bit (bit 0)
    // describes depth 1 node (root's children). The `bit index + 1` is equal to node's depth.
    fixed64 empty_nodes_mask = 1;
    // The non-empty nodes, stored in depth-order, but not contiguous across depth.
    repeated digest.Digest siblings = 2;
}
