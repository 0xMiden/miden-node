// Specification of the Network Transaction Builder RPC.
syntax = "proto3";
package ntx_builder;

import "types/primitives.proto";
import "types/note.proto";
import "google/protobuf/empty.proto";

service Api {
    // Submit a list of network notes to the network transaction builder.
    //
    // When a block gets committed in the blockchain, the list of new network notes needs to be 
    // submitted to the NTB through this endpoint in order for it to track them and eventually 
    // consume them.
    rpc SubmitNetworkNotes(TransactionNetworkNotes) returns (google.protobuf.Empty) {}

    // Update network transaction builder with transaction status changes.
    //
    // Any transaction that has been either committed or reverted is communicated to the NTB so
    // it can track the lifecycle of inflight transactions and notes correctly.
    rpc UpdateTransactionStatus(TransactionStatus) returns (google.protobuf.Empty) {}

    // Update the status of network notes that were consumed externally.
    //
    // When a new transaction enters the mempool, the NTB needs to be notified of the nullifiers
    // that this transaction consumes through this endpoint. This way, the NTB can discard
    // nullified notes correctly.
    rpc UpdateNetworkNotes(NetworkNotes) returns (google.protobuf.Empty) {}
}

// SUBMIT NETWORK NOTES
// ================================================================================================

// Submit a list of network notes to the network transaction builder.
message TransactionNetworkNotes {    
    // Id of the transaction that created the notes.
    primitives.Digest transaction_id = 1;

    // The network notes to submit.
    repeated note.NetworkNote note = 2;
}

// UPDATE TRANSACTION STATUS
// ================================================================================================

// Update network transaction builder with transaction status changes.
message TransactionStatus {
    // Represents the status of a transaction.
    enum TransactionStatus {
        COMMITTED = 0;
        REVERTED = 1;
    }
    
    // Represents the update for a single transaction.
    message TransactionUpdate {
        // Id of the transaction to update.
        primitives.Digest transaction_id = 1;

        // New status of the transaction.
        TransactionStatus status = 2;
    }

    // The list of updates for each transaction.
    repeated TransactionUpdate updates = 1;
}

// UPDATE NETWORK NOTES
// ================================================================================================

// Update the status of network notes that were consumed externally.
message NetworkNotes {    
    // Id of the transaction that consumed the notes.
    primitives.Digest transaction_id = 1;

    // The output nullifiers.
    repeated primitives.Digest nullifiers = 2;
}
