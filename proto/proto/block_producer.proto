// Specification of the user facing gRPC API.
syntax = "proto3";
package block_producer;

import "types/account.proto";
import "types/blockchain.proto";
import "types/primitives.proto";
import "types/shared.proto";
import "google/protobuf/empty.proto";

service Api {
    // Submits proven transaction to the Miden network
    rpc SubmitProvenTransaction(shared.SubmitProvenTransaction) returns (shared.ProvenTransaction) {}

    // Returns the status info.
    rpc Status(google.protobuf.Empty) returns (shared.BlockProducerStatus) {}

    // Subscribe to mempool events.
    //
    // The request will be rejected if the caller and the mempool disagree on the current chain tip.
    // This prevents potential desync issues. The caller can resolve this by resync'ing its chain state.
    //
    // The event stream will contain all events after the chain tip. This includes all currently inflight
    // events that have not yet been committed to the chain.
    //
    // Currently only a single active subscription is supported. Subscription requests will cancel the active
    // subscription, if any.
    rpc MempoolSubscription(MempoolSubscription) returns (stream MempoolEvent) {}
}

message MempoolSubscription {
    // The caller's current chain height.
    //
    // Request will be rejected if this does not match the mempool's current view.
    fixed32 chain_tip = 1;
}

message MempoolEvent {
    oneof event {
        TransactionAdded transaction_added = 1;
        BlockCommitted block_committed = 2;
        TransactionsReverted transactions_reverted = 3;
    };
}

// A transaction was added to the mempool.
message TransactionAdded {
    // The ID of the transaction.
    blockchain.TransactionId id = 1;
    // Nullifiers consumed by the transaction.
    repeated primitives.Digest nullifiers = 2;
    // Network notes created by the transaction.
    repeated account.NetworkNote network_notes = 3;
    // Changes to a network account, if any. This includes creation of new network accounts.
    //
    // The account delta is encoded using [winter_utils::Serializable] implementation
    // for [miden_objects::account::delta::AccountDelta].
    optional bytes network_account_delta = 4;
}

// A block was committed.
message BlockCommitted {
    blockchain.BlockHeader block_header = 1;
    repeated blockchain.TransactionId transactions = 2;
}

// A set of transactions was reverted and dropped from the mempool.
message TransactionsReverted {
    repeated blockchain.TransactionId reverted = 1;
}
