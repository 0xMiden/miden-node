name: Build Debian Packages
description: Publishes Debian packages for the given git reference
inputs:
  github_token:
    required: true
    description: GitHub token for authentication.
  gitref:
    required: true
    description: The git ref to build the packages from.
  arch:
    required: true
    description: Machine architecture to build packages for.
    type: choice
    options:
      - amd64
      - arm64
  bin:
    required: true
    description: Name of binary being packages.
    type: choice
    options:
      - miden-node
      - miden-faucet
      - miden-proving-service
  service:
    required: true
    description: The service to build the packages for.
    type: choice
    options:
      - miden-node
      - miden-faucet
      - miden-prover
      - miden-prover-proxy
  service_short:
    required: true
    description: The short form service to build the packages for.
    type: choice
    options:
      - node
      - faucet
      - prover
      - prover-proxy

runs:
  using: "composite"
  steps:
    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        # Only update the cache on push onto the next branch. This strikes a nice balance between
        # cache hits and cache evictions (github has a 10GB cache limit).
        save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}

    - name: Rust update
      shell: bash
      run: |
        rustup update --no-self-update

    - name: Identify target git SHA
      id: git-sha
      shell: bash
      run: |
        if git show-ref -q --verify "refs/remotes/origin/${{ inputs.gitref }}" 2>/dev/null; then
          echo "sha=$(git show-ref --hash --verify 'refs/remotes/origin/${{ inputs.gitref }}')" >> $GITHUB_OUTPUT
        elif git show-ref -q --verify "refs/tags/${{ inputs.gitref }}" 2>/dev/null; then
          echo "sha=$(git show-ref --hash --verify 'refs/tags/${{ inputs.gitref }}')" >> $GITHUB_OUTPUT
        elif git rev-parse --verify "${{ inputs.gitref }}^{commit}" >/dev/null 2>&1; then
          echo "sha=$(git rev-parse --verify '${{ inputs.gitref }}^{commit}')" >> $GITHUB_OUTPUT
        else
          echo "::error::Unknown git reference type"
          exit 1
        fi

    - name: Create package directories
      shell: bash
      run: |
        pkg=${{ inputs.service }}
        mkdir -p \
          packaging/deb/$pkg/DEBIAN \
          packaging/deb/$pkg/usr/bin \
          packaging/deb/$pkg/lib/systemd/system \
          packaging/deb/$pkg/opt/$pkg \
        done

    - name: Copy package install scripts
      shell: bash
      run: |
        pkg=${{ inputs.service }}
        pkg_short=${{ inputs.service_short }}
        cp bin/$pkg_short/.env                 packaging/deb/$pkg/lib/systemd/system/$pkg.env
        cp packaging/$pkg_short/$pkg.service    packaging/deb/$pkg/lib/systemd/system/$pkg.service
        cp packaging/$pkg_short/postinst                packaging/deb/$pkg/DEBIAN/postinst
        cp packaging/$pkg_short/postrm                  packaging/deb/$pkg/DEBIAN/postrm
        #git show ${{ steps.git-sha.outputs.sha }}:bin/$pkg_short/.env                > packaging/deb/$pkg/lib/systemd/system/$pkg.env || true
        #git show ${{ steps.git-sha.outputs.sha }}:packaging/$pkg_short/$pkg.service   > packaging/deb/$pkg/lib/systemd/system/$pkg.service
        #git show ${{ steps.git-sha.outputs.sha }}:packaging/$pkg_short/postinst               > packaging/deb/$pkg/DEBIAN/postinst
        #git show ${{ steps.git-sha.outputs.sha }}:packaging/$pkg_short/postrm                 > packaging/deb/$pkg/DEBIAN/postrm
        chmod 0775 packaging/deb/$pkg/DEBIAN/postinst
        chmod 0775 packaging/deb/$pkg/DEBIAN/postrm

    - name: Create control files
      shell: bash
      run: |
        # Map the architecture to the format required by Debian.
        # i.e. arm64 and amd64 instead of aarch64 and x86_64.
        arch=$(uname -m | sed "s/x86_64/amd64/" | sed "s/aarch64/arm64/")
        # Control file's version field must be x.y.z format so strip the rest.
        version=$(git describe --tags --abbrev=0 | sed 's/[^0-9.]//g' )

        pkg=${{ inputs.service }}
        cat > packaging/deb/$pkg/DEBIAN/control << EOF
        Package: $pkg
        Version: $version
        Section: base
        Priority: optional
        Architecture: $arch
        Maintainer: Miden <devops@miden.team>
        Description: $pkg binary package
        Homepage: https://miden.xyz
        Vcs-Git: git@github.com:0xMiden/miden-node.git
        Vcs-Browser: https://github.com/0xMiden/miden-node
        EOF

    - name: Build binaries
      shell: bash
      env:
        repo-url: ${{ github.server_url }}/${{ github.repository }}
      run: |
        cargo install ${{ inputs.service }} --root . --locked --git ${{ env.repo-url }} --rev ${{ steps.git-sha.outputs.sha }}

    - name: Copy binary files
      shell: bash
      run: |
        pkg=${{ inputs.service }}
        bin=${{ inputs.bin }}
        cp -p ./bin/$bin   packaging/deb/$pkg/usr/bin/

    - name: Build packages
      shell: bash
      run: |
        dpkg-deb --build --root-owner-group packaging/deb/${{ inputs.service }}

        # Save the .deb files, delete the rest.
        mv packaging/deb/*.deb .
        rm -rf packaging

    - name: Package names
      shell: bash
      run: |
        echo "package=${{ inputs.service }}-${{ inputs.gitref }}-${{ inputs.arch }}.deb" >> $GITHUB_ENV

    - name: Rename package files
      shell: bash
      run: |
        mv ${{ inputs.service }}.deb ${{ env.package }}

    - name: shasum packages
      shell: bash
      run: |
        sha256sum ${{ env.package }} > ${{ env.package }}.checksum

    - name: Publish packages
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        gh release upload ${{ env.version }} \
          ${{ env.package }} \
          ${{ env.package }}.checksum \
          --clobber
