// This file is @generated by prost-build.
/// Represents a block header.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockHeader {
    /// Specifies the version of the protocol.
    #[prost(uint32, tag = "1")]
    pub version: u32,
    /// The commitment of the previous blocks header.
    #[prost(message, optional, tag = "2")]
    pub prev_block_commitment: ::core::option::Option<super::primitives::Digest>,
    /// A unique sequential number of the current block.
    #[prost(fixed32, tag = "3")]
    pub block_num: u32,
    /// A commitment to an MMR of the entire chain where each block is a leaf.
    #[prost(message, optional, tag = "4")]
    pub chain_commitment: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to account database.
    #[prost(message, optional, tag = "5")]
    pub account_root: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to the nullifier database.
    #[prost(message, optional, tag = "6")]
    pub nullifier_root: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to all notes created in the current block.
    #[prost(message, optional, tag = "7")]
    pub note_root: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to a set of IDs of transactions which affected accounts in this block.
    #[prost(message, optional, tag = "8")]
    pub tx_commitment: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to a STARK proof attesting to the correct state transition.
    #[prost(message, optional, tag = "9")]
    pub proof_commitment: ::core::option::Option<super::primitives::Digest>,
    /// A commitment to all transaction kernels supported by this block.
    #[prost(message, optional, tag = "10")]
    pub tx_kernel_commitment: ::core::option::Option<super::primitives::Digest>,
    /// The time when the block was created.
    #[prost(fixed32, tag = "11")]
    pub timestamp: u32,
}
/// Represents a transaction ID.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransactionId {
    /// The transaction ID.
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::primitives::Digest>,
}
/// Represents a transaction summary.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionSummary {
    /// A unique 32-byte identifier of a transaction.
    #[prost(message, optional, tag = "1")]
    pub transaction_id: ::core::option::Option<TransactionId>,
    /// The block number in which the transaction was executed.
    #[prost(fixed32, tag = "2")]
    pub block_num: u32,
    /// The ID of the account affected by the transaction.
    #[prost(message, optional, tag = "3")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransactionStatus {
    Committed = 0,
    Reverted = 1,
}
impl TransactionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Committed => "COMMITTED",
            Self::Reverted => "REVERTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMMITTED" => Some(Self::Committed),
            "REVERTED" => Some(Self::Reverted),
            _ => None,
        }
    }
}
