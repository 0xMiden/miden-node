// This file is @generated by prost-build.
/// Uniquely identifies a specific account.
///
/// A Miden account ID is a 120-bit value derived from the commitments to account code and storage,
/// and a random user-provided seed.
#[derive(Clone, PartialEq, ::prost::Message)]
#[prost(skip_debug)]
pub struct AccountId {
    /// 15 bytes (120 bits) encoded using \[winter_utils::Serializable\] implementation for
    /// \[miden_objects::account::account_id::AccountId\].
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
}
/// The state of an account at a specific block height.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountSummary {
    /// The account ID.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<AccountId>,
    /// The current account commitment or zero if the account does not exist.
    #[prost(message, optional, tag = "2")]
    pub account_commitment: ::core::option::Option<super::primitives::Digest>,
    /// Block number at which the summary was made.
    #[prost(uint32, tag = "3")]
    pub block_num: u32,
}
/// An account info.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountInfo {
    /// Account summary.
    #[prost(message, optional, tag = "1")]
    pub summary: ::core::option::Option<AccountSummary>,
    /// Account details encoded using \[winter_utils::Serializable\] implementation for
    /// \[miden_objects::account::Account\].
    #[prost(bytes = "vec", optional, tag = "2")]
    pub details: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// An account header.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountHeader {
    /// Vault root hash.
    #[prost(message, optional, tag = "1")]
    pub vault_root: ::core::option::Option<super::primitives::Digest>,
    /// Storage root hash.
    #[prost(message, optional, tag = "2")]
    pub storage_commitment: ::core::option::Option<super::primitives::Digest>,
    /// Code root hash.
    #[prost(message, optional, tag = "3")]
    pub code_commitment: ::core::option::Option<super::primitives::Digest>,
    /// Account nonce.
    #[prost(uint64, tag = "4")]
    pub nonce: u64,
}
/// Represents a note's metadata.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteMetadata {
    /// The account which sent the note.
    #[prost(message, optional, tag = "1")]
    pub sender: ::core::option::Option<AccountId>,
    /// The type of the note (0b01 = public, 0b10 = private, 0b11 = encrypted).
    #[prost(uint32, tag = "2")]
    pub note_type: u32,
    /// A value which can be used by the recipient(s) to identify notes intended for them.
    ///
    /// See `miden_objects::note::note_tag` for more info.
    #[prost(fixed32, tag = "3")]
    pub tag: u32,
    /// Specifies when a note is ready to be consumed.
    ///
    /// See `miden_objects::note::execution_hint` for more info.
    #[prost(fixed64, tag = "4")]
    pub execution_hint: u64,
    /// An arbitrary user-defined value.
    #[prost(fixed64, tag = "5")]
    pub aux: u64,
}
/// Represents a committed note.
///
/// A committed note is a note that has been included in a block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommittedNote {
    /// Either private, public, or network note.
    #[prost(message, optional, tag = "1")]
    pub note: ::core::option::Option<Note>,
    /// The data needed to prove that the note is present in the chain.
    #[prost(message, optional, tag = "2")]
    pub inclusion_proof: ::core::option::Option<NoteInclusionInBlockProof>,
}
/// Represents a note.
///
/// The note is composed of the note metadata and its serialized details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Note {
    /// The note's metadata.
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<NoteMetadata>,
    /// Serialized note details (empty for private notes).
    #[prost(bytes = "vec", optional, tag = "2")]
    pub details: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Represents a network note.
///
/// The note is composed of the note metadata and its serialized details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkNote {
    /// The note's metadata.
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<NoteMetadata>,
    /// Serialized note details (i.e., assets and recipient).
    #[prost(bytes = "vec", tag = "2")]
    pub details: ::prost::alloc::vec::Vec<u8>,
}
/// Represents a proof of note's inclusion in a block.
///
/// Does not include proof of the block's inclusion in the chain.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteInclusionInBlockProof {
    /// A unique identifier of the note which is a 32-byte commitment to the underlying note data.
    #[prost(message, optional, tag = "1")]
    pub note_id: ::core::option::Option<super::primitives::Digest>,
    /// The block number in which the note was created.
    #[prost(fixed32, tag = "2")]
    pub block_num: u32,
    /// The index of the note in the block.
    #[prost(uint32, tag = "3")]
    pub note_index_in_block: u32,
    /// The note's inclusion proof in the block.
    #[prost(message, optional, tag = "4")]
    pub merkle_path: ::core::option::Option<super::primitives::MerklePath>,
}
/// Represents proof of a note inclusion in the block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteSyncRecord {
    /// The index of the note.
    #[prost(uint32, tag = "1")]
    pub note_index: u32,
    /// A unique identifier of the note which is a 32-byte commitment to the underlying note data.
    #[prost(message, optional, tag = "2")]
    pub note_id: ::core::option::Option<super::primitives::Digest>,
    /// The note's metadata.
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<NoteMetadata>,
    /// The note's inclusion proof in the block.
    #[prost(message, optional, tag = "4")]
    pub merkle_path: ::core::option::Option<super::primitives::MerklePath>,
}
