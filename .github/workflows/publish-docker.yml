name: Publish Node and Faucet Docker Images

on:
  release:
    types: [prereleased, released]

  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (E.G. v0.10.0-rc.1, v0.10.0). Corresponding git tag must already exist."
        required: true
        type: string

env:
  version: ${{ inputs.version || github.ref_name }}
  registry: ghcr.io

permissions:
  id-token: write
  contents: write
  packages: write
  attestations: write

jobs:
  publish:
    runs-on:
      labels: "ubuntu-latest"
    strategy:
      matrix:
        component: [node, faucet]
    name: Publish ${{ matrix.component }} ${{ inputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@main
        with:
          ref: ${{ env.version }}
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GithubActionsSession

      - name: Set cache key
        id: cache-key
        run: |
          echo "cache_key=miden-${{ matrix.component }}-main" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          cache-binary: true

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          file: ./bin/${{ matrix.component }}/Dockerfile
          tags: ${{ env.registry }}/0xmiden/miden-${{ matrix.component }}:${{ env.version }}
          cache-from: type=s3,region=${{ secrets.AWS_REGION }},bucket=${{ secrets.AWS_CACHE_BUCKET }},name=${{ steps.cache-key.outputs.cache_key }}
          cache-to: type=s3,region=${{ secrets.AWS_REGION }},bucket=${{ secrets.AWS_CACHE_BUCKET }},name=${{ steps.cache-key.outputs.cache_key }},mode=max
