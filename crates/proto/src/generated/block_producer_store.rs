// This file is @generated by prost-build.
/// Returns data required to prove the next block.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInputsRequest {
    /// IDs of all accounts updated in the proposed block for which to retrieve account witnesses.
    #[prost(message, repeated, tag = "1")]
    pub account_ids: ::prost::alloc::vec::Vec<super::account::AccountId>,
    /// Nullifiers of all notes consumed by the block for which to retrieve witnesses.
    ///
    /// Due to note erasure it will generally not be possible to know the exact set of nullifiers
    /// a block will create, unless we pre-execute note erasure. So in practice, this set of
    /// nullifiers will be the set of nullifiers of all proven batches in the block, which is a
    /// superset of the nullifiers the block may create.
    ///
    /// However, if it is known that a certain note will be erased, it would not be necessary to
    /// provide a nullifier witness for it.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Array of note IDs for which to retrieve note inclusion proofs, **if they exist in the store**.
    #[prost(message, repeated, tag = "3")]
    pub unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Array of block numbers referenced by all batches in the block.
    #[prost(fixed32, repeated, tag = "4")]
    pub reference_blocks: ::prost::alloc::vec::Vec<u32>,
}
/// Represents the result of getting block inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInputs {
    /// The latest block header.
    #[prost(message, optional, tag = "1")]
    pub latest_block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Proof of each requested unauthenticated note's inclusion in a block, **if it existed in
    /// the store**.
    #[prost(message, repeated, tag = "2")]
    pub unauthenticated_note_proofs: ::prost::alloc::vec::Vec<
        super::note::NoteInclusionInBlockProof,
    >,
    /// The serialized chain MMR which includes proofs for all blocks referenced by the
    /// above note inclusion proofs as well as proofs for inclusion of the requested blocks
    /// referenced by the batches in the block.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_block_chain: ::prost::alloc::vec::Vec<u8>,
    /// The state commitments of the requested accounts and their authentication paths.
    #[prost(message, repeated, tag = "4")]
    pub account_witnesses: ::prost::alloc::vec::Vec<super::account::AccountWitness>,
    /// The requested nullifiers and their authentication paths.
    #[prost(message, repeated, tag = "5")]
    pub nullifier_witnesses: ::prost::alloc::vec::Vec<block_inputs::NullifierWitness>,
}
/// Nested message and enum types in `BlockInputs`.
pub mod block_inputs {
    /// A nullifier returned as a response to the `GetBlockInputs`.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct NullifierWitness {
        /// The nullifier.
        #[prost(message, optional, tag = "1")]
        pub nullifier: ::core::option::Option<super::super::primitives::Digest>,
        /// The SMT proof to verify the nullifier's inclusion in the nullifier tree.
        #[prost(message, optional, tag = "2")]
        pub opening: ::core::option::Option<super::super::primitives::SmtOpening>,
    }
}
/// Returns the inputs for a transaction batch.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchInputsRequest {
    /// List of unauthenticated notes to be queried from the database.
    #[prost(message, repeated, tag = "1")]
    pub note_ids: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Set of block numbers referenced by transactions.
    #[prost(fixed32, repeated, tag = "2")]
    pub reference_blocks: ::prost::alloc::vec::Vec<u32>,
}
/// Represents the result of getting batch inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchInputs {
    /// The block header that the transaction batch should reference.
    #[prost(message, optional, tag = "1")]
    pub batch_reference_block_header: ::core::option::Option<
        super::blockchain::BlockHeader,
    >,
    /// Proof of each _found_ unauthenticated note's inclusion in a block.
    #[prost(message, repeated, tag = "2")]
    pub note_proofs: ::prost::alloc::vec::Vec<super::note::NoteInclusionInBlockProof>,
    /// The serialized chain MMR which includes proofs for all blocks referenced by the
    /// above note inclusion proofs as well as proofs for inclusion of the blocks referenced
    /// by the transactions in the batch.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_block_chain: ::prost::alloc::vec::Vec<u8>,
}
/// Returns data required to validate a new transaction.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionInputsRequest {
    /// ID of the account against which a transaction is executed.
    #[prost(message, optional, tag = "1")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
    /// Set of nullifiers consumed by this transaction.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// Set of unauthenticated notes to check for existence on-chain.
    ///
    /// These are notes which were not on-chain at the state the transaction was proven,
    /// but could by now be present.
    #[prost(message, repeated, tag = "3")]
    pub unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Represents the result of getting transaction inputs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionInputs {
    /// Account state proof.
    #[prost(message, optional, tag = "1")]
    pub account_state: ::core::option::Option<
        transaction_inputs::AccountTransactionInputRecord,
    >,
    /// List of nullifiers that have been consumed.
    #[prost(message, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<
        transaction_inputs::NullifierTransactionInputRecord,
    >,
    /// List of unauthenticated notes that were not found in the database.
    #[prost(message, repeated, tag = "3")]
    pub found_unauthenticated_notes: ::prost::alloc::vec::Vec<super::primitives::Digest>,
    /// The node's current block height.
    #[prost(fixed32, tag = "4")]
    pub block_height: u32,
}
/// Nested message and enum types in `TransactionInputs`.
pub mod transaction_inputs {
    /// An account returned as a response to the `GetTransactionInputs`.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountTransactionInputRecord {
        /// The account ID.
        #[prost(message, optional, tag = "1")]
        pub account_id: ::core::option::Option<super::super::account::AccountId>,
        /// The latest account commitment, zero commitment if the account doesn't exist.
        #[prost(message, optional, tag = "2")]
        pub account_commitment: ::core::option::Option<super::super::primitives::Digest>,
    }
    /// A nullifier returned as a response to the `GetTransactionInputs`.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct NullifierTransactionInputRecord {
        /// The nullifier ID.
        #[prost(message, optional, tag = "1")]
        pub nullifier: ::core::option::Option<super::super::primitives::Digest>,
        /// The block at which the nullifier has been consumed, zero if not consumed.
        #[prost(fixed32, tag = "2")]
        pub block_num: u32,
    }
}
/// Generated client implementations.
pub mod block_producer_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store API for the BlockProducer component
    #[derive(Debug, Clone)]
    pub struct BlockProducerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BlockProducerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BlockProducerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BlockProducerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BlockProducerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Applies changes of a new block to the DB and in-memory data structures.
        pub async fn apply_block(
            &mut self,
            request: impl tonic::IntoRequest<super::super::blockchain::Block>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_producer_store.BlockProducer/ApplyBlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("block_producer_store.BlockProducer", "ApplyBlock"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::BlockHeaderByNumberRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumberResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_producer_store.BlockProducer/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_producer_store.BlockProducer",
                        "GetBlockHeaderByNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns data required to prove the next block.
        pub async fn get_block_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::BlockInputsRequest>,
        ) -> std::result::Result<tonic::Response<super::BlockInputs>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_producer_store.BlockProducer/GetBlockInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_producer_store.BlockProducer",
                        "GetBlockInputs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the inputs for a transaction batch.
        pub async fn get_batch_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchInputsRequest>,
        ) -> std::result::Result<tonic::Response<super::BatchInputs>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_producer_store.BlockProducer/GetBatchInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_producer_store.BlockProducer",
                        "GetBatchInputs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns data required to validate a new transaction.
        pub async fn get_transaction_inputs(
            &mut self,
            request: impl tonic::IntoRequest<super::TransactionInputsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionInputs>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/block_producer_store.BlockProducer/GetTransactionInputs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "block_producer_store.BlockProducer",
                        "GetTransactionInputs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod block_producer_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BlockProducerServer.
    #[async_trait]
    pub trait BlockProducer: std::marker::Send + std::marker::Sync + 'static {
        /// Applies changes of a new block to the DB and in-memory data structures.
        async fn apply_block(
            &self,
            request: tonic::Request<super::super::blockchain::Block>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        async fn get_block_header_by_number(
            &self,
            request: tonic::Request<super::super::shared::BlockHeaderByNumberRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumberResponse>,
            tonic::Status,
        >;
        /// Returns data required to prove the next block.
        async fn get_block_inputs(
            &self,
            request: tonic::Request<super::BlockInputsRequest>,
        ) -> std::result::Result<tonic::Response<super::BlockInputs>, tonic::Status>;
        /// Returns the inputs for a transaction batch.
        async fn get_batch_inputs(
            &self,
            request: tonic::Request<super::BatchInputsRequest>,
        ) -> std::result::Result<tonic::Response<super::BatchInputs>, tonic::Status>;
        /// Returns data required to validate a new transaction.
        async fn get_transaction_inputs(
            &self,
            request: tonic::Request<super::TransactionInputsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransactionInputs>,
            tonic::Status,
        >;
    }
    /// Store API for the BlockProducer component
    #[derive(Debug)]
    pub struct BlockProducerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> BlockProducerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BlockProducerServer<T>
    where
        T: BlockProducer,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/block_producer_store.BlockProducer/ApplyBlock" => {
                    #[allow(non_camel_case_types)]
                    struct ApplyBlockSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::super::blockchain::Block>
                    for ApplyBlockSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::blockchain::Block>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::apply_block(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ApplyBlockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_producer_store.BlockProducer/GetBlockHeaderByNumber" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockHeaderByNumberSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<
                        super::super::shared::BlockHeaderByNumberRequest,
                    > for GetBlockHeaderByNumberSvc<T> {
                        type Response = super::super::shared::BlockHeaderByNumberResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::shared::BlockHeaderByNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_block_header_by_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockHeaderByNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_producer_store.BlockProducer/GetBlockInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetBlockInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::BlockInputsRequest>
                    for GetBlockInputsSvc<T> {
                        type Response = super::BlockInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BlockInputsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_block_inputs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBlockInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_producer_store.BlockProducer/GetBatchInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetBatchInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::BatchInputsRequest>
                    for GetBatchInputsSvc<T> {
                        type Response = super::BatchInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchInputsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_batch_inputs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetBatchInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/block_producer_store.BlockProducer/GetTransactionInputs" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionInputsSvc<T: BlockProducer>(pub Arc<T>);
                    impl<
                        T: BlockProducer,
                    > tonic::server::UnaryService<super::TransactionInputsRequest>
                    for GetTransactionInputsSvc<T> {
                        type Response = super::TransactionInputs;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransactionInputsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BlockProducer>::get_transaction_inputs(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTransactionInputsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for BlockProducerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "block_producer_store.BlockProducer";
    impl<T> tonic::server::NamedService for BlockProducerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
